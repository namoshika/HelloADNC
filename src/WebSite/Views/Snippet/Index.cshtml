@using WebSite.Models
@model GalleryInfo
@{
    ViewData["CURRENT_TAB"] = "Snippet";
    ViewData["TITLE_PAGE"] = "Snippet";
}
@section stylesheets{
    <script type="text/javascript" src="~/js/expander.js"></script>
}

<div class="row">
    <div class="col-md-12 col-section">
        <div id="contentsGuide" class="section">
            <h2 class="title">@ViewData["TITLE_PAGE"]</h2>
            <p class="text">このWebページを作成する際に作成した部品を再利用し易い形にして(マニュ アルとか)陳列しています。</p>
        </div>
    </div>
</div>
<div class="row row-groupBox">
    <h3 class="col-md-12 col-title title"></h3>
    <div class="col-sm-12 col-section">
        <div class="section section-text">
            <h3 class="title">パンくずリスト生成用PHP</h3>
            <div class="text">
                <p>
                    <a href="~/product/snippet/breadcrumb/source.txt">PHPSource</a>
                    <a href="~/product/snippet/breadcrumb/samplePageMap.xml">SamplePageMap.xml</a>
                </p>
                <p>サイトタイトルの下にある"TOP&gt;GALLERY&gt;..."を生成するPHPスクリプトです。ページ構造を記述したXMLを用いてページのURLよりトップから自身の親ページまでの関係を導き出し、そのリンクを&lt;li&gt;&lt;a&gt;...&lt;/a&gt;&lt;/li&gt;で出力します</p>
                <a id="aaa-btn" href="javascript:void(0);">詳細</a>
                <div id="aaa-area">
                    <h4>PHPスクリプトについて</h4>
                    <p>この機能はPHPファイル内でWriteBreadCrumb関数として定義されており、関数の仕様は以下の通りです。</p>
                    <blockquote>
                        WriteBreadCrumb(string currentPath, string $homeDirectory, SimpleXmlElement $map);
                    </blockquote>
                    <p>引数の役割は第1引数が"現在位置($currentPath)、第2引数がサイトスペースの最上層のパス($homeDirectory)、第3引数がページ間関係記述XML($map)"となっており、使用する際は下の例のようにパンくずリストを挿入したい場所でWriteBreadCrumb関数を呼び出します。なお、この関数は$currentPathと$homeDirectoryから親ページのURLを生成しますが、これは$homeDirectoryの後に$mapの定義に従い、分割された$currentPathを順次結合させることで生成しています。そして$homeDirectoryは"http://"を含まず、ドメインから始まります。その点を把握すると$currentPathを書きやすくなると思います。</p>
                    <blockquote>
                        &lt;ul&gt;&lt;?php<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;include $phpFilePath;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;WriteBreadCrumb("/gallery/product/", "hogehoge.com/approot", simplexml_load_file("pagemap.xml"));<br />
                        ?&gt;&lt;/ul&gt;
                    </blockquote>
                    <h4>XMLファイルの仕様について</h4>
                    <p>XMLファイルはpagemapタグをルートタグとし、その下にpageタグがネストする事で、Topページから末端ページまでの階層関係を保持しております。そして、このpageタグはtitle属性とurl属性を保持しており、トップページのpageタグから目的のページまでを辿りながら経路上のpageタグのurlの内容を取得・結合していくことで自身に繋がる経路に存在するページのURLを把握していきます。</p>
                    <blockquote>
                        &lt;pagemap&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;<span class="important">&lt;page title="Top" url="/"&gt;</span><br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;page title="About" url="about/" /&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="important">&lt;page title="Gallery" url="gallery/"&gt;</span><br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="important">&lt;page title="CodeModules" url="modules/"&gt;</span><br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/page&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;page title="Topic" url="topics/"&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/page&gt;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/page&gt;<br />
                        &lt;/pagemap&gt;<br />
                    </blockquote>
                    <p>上記のXMLでは以下のように自身へ繋がる経路上のページURLを取得します。</p>
                    <blockquote>
                        $homeDirectory: "hogehoge.com";<br />
                        TOP: "hogehoge.com" + "/";<br />
                        GALLERY: "hogehoge.com" + "/" + "gallery/";<br />
                        CODEMODULES: "hogehoge.com" + "/" + "gallery/" + "modules/";
                    </blockquote>
                    <h4>出力仕様について</h4>
                    <p>出力されたliタグの最後の要素にはclass属性で"current"が付くため、cssで少々弄れます。</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-12 col-section">
        <div class="section section-text">
            <h3 class="title">更新履歴生成用PHP</h3>
            <div class="text">
                <p>
                    <a href="~/product/snippet/timeline/source.txt">PHPSource</a>
                    <a href="~/product/snippet/timeline/sampleTimeline.xml">SampleTimeline.xml</a>
                </p>
                <p>更新履歴を生成するPHPスクリプトです。更新履歴を記述したXMLから(&lt;dt&gt;...&lt;/dt&gt;)&amp;(&lt;dd&gt;...&lt;/dd&gt;)の形式でページに出力します。これにより、更新履歴のデータをhtmlから分離するが可能となり、更新履歴を更新する度にトップページを丸ごと差し替えずに済むようになります。</p>
                <a id="bbb-btn" href="javascript:void(0);">詳細</a>
                <div id="bbb-area">
                    <h4>PHPスクリプトについて</h4>
                    <p>この機能はPHPファイル内でWriteTimeline関数として定義されており、関数の仕様は以下の通りです。</p>
                    <blockquote>
                        WriteTimeLine(SimpleXmlElement timelineXml);
                    </blockquote>
                    <p>使用する際は下の例のように更新履歴を挿入したい場所でWriteTimeline関数を呼び出します。</p>
                    <blockquote>
                        &lt;dl&gt;&lt;?php<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;include $phpFilePath;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;WriteTimeLine(simplexml_load_file("updateLog.xml"));<br />
                        ?&gt;&lt;/dl&gt;
                    </blockquote>
                    <h4>XMLファイルの仕様について</h4>
                    <p>XMLファイルはmessageLogタグをルートタグとし、その下にnewsタグを0個以上保持します。このnewsタグはnoticeタグを0個以上保持しており、noticeタグはmessageタグ1つとcommentタグ0個以上からなっています。</p>
                    <h4>出力仕様について</h4>
                    <p>出力された要素にはclass属性が付き、日付が書かれたdtタグには"date"、メッセージが書かれたタグには"message"、コメントが書かれたタグには"comment"と其々に付けられます。</p>
                </div>
            </div>
        </div>
    </div>
</div>
